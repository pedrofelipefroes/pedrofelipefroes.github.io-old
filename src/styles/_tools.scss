@import '_settings';

@function color($name) {
	@return var(--color-#{$name});
}

@function spacing($value) {
	@if $value == auto { @return auto; }
	@else if $value == 0 { @return 0; }
	@return var(--spacing-#{$value});
}

@function spacingList($list...) {
	$output: ();
	@each $value in $list {
		$output: append($output, $value, space);
	}
	@return #{$output};
}

@mixin l-display-bp {
	@media screen and (min-width: $display-bp) {
		@content;
	}
}

@mixin l-display-mw {
	margin: 0 auto;
	max-width: $display-mw;
}

@mixin l-flex($align: null, $justify: null, $direction: column, $spacing: 3) {
	display: flex;
	flex-direction: $direction;

	@if $align { 
		align-items: $align
	}
	@if $justify {
		justify-content: $justify
	}
	
	& > *:not(:last-child) {
		@if $direction == column {
			margin-bottom: spacing($spacing);
		}
		@else if $direction == row {
			margin-right: spacing($spacing);
		}
	}
	
	& > *:not(:first-child) {
		@if $direction == column-reverse {
			margin-bottom: spacing($spacing);
		}
		@else if $direction == row-reverse {
			margin-right: spacing($spacing);
		}
	}
}

@mixin l-margin($all: null, $t: null, $r: null, $b: null, $l: null, $x: null, $y: null) {
	@if $all { margin: spacing($all); }
	@if $t { margin-top: spacing($t); }
	@if $r { margin-right: spacing($r); }
	@if $b { margin-bottom: spacing($b); }
	@if $l { margin-left: spacing($l); }
	@if $x {
		margin-left: spacing($x);
		margin-right: spacing($x);
	}
	@if $y {
		margin-bottom: spacing($y);
		margin-top: spacing($y);
	}
}

@mixin l-padding($all: null, $t: null, $r: null, $b: null, $l: null, $x: null, $y: null) {
	@if $all { margin: spacing($all); }
	@if $t { padding-top: spacing($t); }
	@if $r { padding-right: spacing($r); }
	@if $b { padding-bottom: spacing($b); }
	@if $l { padding-left: spacing($l); }
	@if $x {
		padding-left: spacing($x);
		padding-right: spacing($x);
	}
	@if $y {
		padding-bottom: spacing($y);
		padding-top: spacing($y);
	}
}